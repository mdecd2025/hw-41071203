<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-41071203/content/index.html">https://mdecd2025.github.io/hw-41071203/content/index.html</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41071203">https://github.com/mdecd2025/hw-41071203</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<p><br/><br/><br/></p>
<p></p>
<h1>Tasks</h1>
<p><strong>task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作:</strong></p>
<p>      task1 (自行製作可攜程式系統)</p>
<p>      task2 (使用 SSH 協定執行作業倉儲的推送)</p>
<p><strong>task3 與 task4 則為 HW2 的內容之一</strong></p>
<p>      task3 (使用 Solvespace 建立平面四連桿系統零組件)</p>
<p>      task4 (使用 Onshape 建立平面四連桿系統零組件)</p>
<p><strong>task5 與 task6 則為 HW3 的主要內容</strong></p>
<p>      task5 (Webots Tutorial 1 ~3)</p>
<p>      task6 (Webots Tutorial 4 ~6)</p>
<h3>Wink</h3>
<!-- 假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="123" height="630" muted="true" width="1008">
<source src="./../downloads/123.mp4" type="video/mp4"/></video></div>
<h2>task1</h2>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/dBnGyxULzss?si=sWDLOByw8O8Owjpz" title="YouTube video player" width="560"></iframe></p>
<h3>list</h3>
<p>程式碼</p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 從  Brython 程式庫中的 browser 導入 html, 可用來輸出超文件內容
# 而所導入的 document 可以指向網頁中的特定 id 內容
from browser import html, document
# 建立 url 變數與網站中 2b 學員的學號與帳號資料 URL 網誌字串對應
url = "https://mde.tw/list/2b.txt"
# 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列
data = open(url).readlines()
# 進行資料查驗時, 印出 data 數列內容
#print(data)
# 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始
all_stud = data[1:]
# 利用 len() 函式查驗 all_stud 數列有幾筆資料, 因為要與前後的字串併接, 因此利用 str() 將整數轉為字串
print("總共有 " + str(len(all_stud)) + "名學員")
#
# 利用 document[] 取得 id 為 "brython_div1" 的位置, 然後與 brython_div1 變數對應
brython_div1 = document["brython_div1"]
# 利用 Brython 的 "&lt;=" 特殊符號, 將右值帶有字串與超文件內容物件插入 brython_div1 變數所指定的位置
# 其中利用 html.A 建立 anchor 標註物件, 第一個變數為 anchor 字串, 第二個變數則為 hyper text reference
brython_div1 &lt;= "1. " + html.A("2b-g8", href="https://mdecd2025.github.io/2b-g8/")+ html.A("(repo)", href="https://github.com/mdecd2025/2b-g8")
# 利用 html.BR() 插入 break 標註
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "2. " + html.A("41023215", href="https://mdecd2025.github.io/hw-41023215/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41023215")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "3. " + html.A("41023216", href="https://mdecd2025.github.io/hw-41023216/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41023216")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "4. " + html.A("41023213", href="https://mdecd2025.github.io/hw-41023213/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41023213")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "5. " + html.A("41071203", href="https://mdecd2025.github.io/hw-41071203/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41071203")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "6. " + html.A("41071204", href="https://mdecd2025.github.io/hw-41071204/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41071204")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "7. " + html.A("41071202", href="https://mdecd2025.github.io/hw-41071202/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41071202")</pre>
<p></p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import document, html, ajax

url = "https://mde.tw/list/2b.txt"

def on_complete(req):
    if req.status == 200 or req.status == 0:
        data = req.text
        lines = data.strip().split('\n')
        all_stud = lines[1:] 

        brython_div1 = document["brython_div1"]
        total_students = len(all_stud)
        brython_div1 <= html.SPAN(f"總共有 {total_students} 名學員") + html.BR() + html.BR()

        for idx, stud in enumerate(all_stud, start=1):
            fields = stud.strip().split('\t')
            stud_num = fields[0].strip() if len(fields) >= 1 else f"第 {idx} 位"
            github_account = fields[1].strip() if len(fields) >= 2 else ''
            website_url = f"https://mdecd2025.github.io/hw-{stud_num}"
            website_link = html.A(f"{stud_num} 的網站", href=website_url, target="_blank")
            if github_account:
                repo_url = f"https://github.com/{github_account}"
                repo_link = html.A(f"{stud_num} 的倉儲", href=repo_url, target="_blank")
            else:
                repo_link = html.SPAN("空")
            brython_div1 <= html.SPAN(f"{idx}. ") + website_link + " | " + repo_link + html.BR()
        brython_div1 <= html.BR() + html.HR() + html.BR()
        brython_div1 <= html.SPAN("小組:") + html.BR() + html.BR()

        brython_div1 <= "1. " + html.A("2b-g1", href="https://mdecd2025.github.io/2b-g1/") + " " + html.A("(repo)", href="https://github.com/mdecd2025/2b-g1") + html.BR()
        brython_div1 <= "2. " + html.A("2b-g2", href="https://mdecd2025.github.io/2b-g2/") + " " + html.A("(repo)", href="https://github.com/mdecd2025/2b-g2") + html.BR()
        brython_div1 <= "3. " + html.A("2b-g3", href="https://mdecd2025.github.io/2b-g3/") + " " + html.A("(repo)", href="https://github.com/mdecd2025/2b-g3") + html.BR()
        brython_div1 <= "4. " + html.A("2b-g4", href="https://mdecd2025.github.io/2b-g4/") + " " + html.A("(repo)", href="https://github.com/mdecd2025/2b-g4") + html.BR()
        brython_div1 <= "5. " + html.A("2b-g5", href="https://mdecd2025.github.io/2b-g5/") + " " + html.A("(repo)", href="https://github.com/mdecd2025/2b-g5") + html.BR()
        brython_div1 <= "6. " + html.A("2b-g6", href="https://mdecd2025.github.io/2b-g6/") + " " + html.A("(repo)", href="https://github.com/mdecd2025/2b-g6") + html.BR()
        brython_div1 <= "7. " + html.A("2b-g7", href="https://mdecd2025.github.io/2b-g7/") + " " + html.A("(repo)", href="https://github.com/mdecd2025/2b-g7") + html.BR()
        brython_div1 <= "8. " + html.A("2b-g8", href="https://mdecd2025.github.io/2b-g8/") + " " + html.A("(repo)", href="https://github.com/mdecd2025/2b-g8") + html.BR()
        brython_div1 <= "9. " + html.A("2b-g9", href="https://mdecd2025.github.io/2b-g9/") + " " + html.A("(repo)", href="https://github.com/mdecd2025/2b-g9") + html.BR()
        brython_div1 <= "10. " + html.A("2b-g10", href="https://mdecd2025.github.io/2b-g10/") + " " + html.A("(repo)", href="https://github.com/mdecd2025/2b-g10") + html.BR()

    else:
        print(f"error code：{req.status}")

ajax.get(url, oncomplete=on_complete)
</script>
<div id="brython_div1"></div>
<h2>task2</h2>
<h4><strong>使用 SSH 協定執行作業倉儲的推送操作影片</strong></h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/VjMo25xZ21s?si=1eA0x30V9o5qy4An" title="YouTube video player" width="560"></iframe></p>
<h3>IPV6</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/wp6x48cbDEQ" title="IPV6連線操作影片" width="560"></iframe><br/>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import document, html, ajax
from browser.timer import set_timeout

# 目標 div
div = document["brython_div1"]

# IPv6 基礎位址
base_ip = "2001:288:6004:17:fff1:cd25:0000:b"
port = 8000

# 學員學號列表
student_numbers = [
    40923137, 41023114, 41023205, 41023206, 41023210, 41023213, 41023215, 41023216,
    41023218, 41023232, 41023237, 41071202, 41071203, 41071204, 41223201, 41223202,
    41223203, 41223205, 41223206, 41223207, 41223208, 41223209, 41223210, 41223211,
    41223212, 41223214, 41223215, 41223216, 41223217, 41223218, 41223219, 41223220,
    41223221, 41223222, 41223223, 41223224, 41223225, 41223226, 41223227, 41223228,
    41223229, 41223230, 41223231, 41223232, 41223233, 41223234, 41223235, 41223236,
    41223237, 41223239, 41223240, 41223242, 41223243, 41223244, 41223245, 41223246,
    41223247, 41223248, 41223249, 41223250, 41223251, 41223252, 41223253, 41271217,
    41271236, 41271237
]

# 儲存無法連結的學員
failed_students = []

# 檢查成功與完成請求的計數器
success_count = 0
completed_requests = 0

def check_url(student_id, url):
    def on_complete(req):
        global success_count, completed_requests
        completed_requests += 1
        if req.status == 200:
            success_count += 1
            div <= html.DIV(f"{student_id}: Pass")
        else:
            failed_students.append(student_id)
            div <= html.DIV(f"{student_id}: Failed (Status: {req.status})")
        # 當所有檢查完成時顯示結果
        if completed_requests == len(student_numbers):
            div <= html.HR()
            if failed_students:
                div <= html.DIV("無法連結的學員學號:")
                for failed_id in failed_students:
                    div <= html.DIV(failed_id)
            else:
                div <= html.DIV("所有學員網站均可連結")

    # 發送 AJAX 請求
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.open('GET', url, True)
    req.send()

# 生成並檢查每個學員的連結
for i, student_id in enumerate(student_numbers, 1):
    ip_suffix = f"{i:03d}"
    full_ip = f"{base_ip}{ip_suffix}"
    url = f"http://[{full_ip}]:{port}/content/About.html"
    link = html.A(f"{student_id}", href=url, target="_blank")
    div <= link
    div <= html.BR()
    # 使用顯式函式傳遞參數
    def timeout_callback(s=student_id, u=url):
        check_url(s, u)
    set_timeout(timeout_callback, i * 100)
</script>
</p>
<div id="brython_div1"></div>
<h3>w3</h3>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p><a href="https://mdecd2025.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/450e084a3008cfbc17a7654571cadcd3/raw/177f6f470de0cafa6bf9ea9a3b957a5b075e98f5/CompareData.py">Brython版本</a></p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import document, html
import urllib.request

# 取得網頁中用來呈現結果的容器
brython_div1 = document["brython_div1"]

# 預期的 GitHub 帳號清單（注意：這些現在都是 GitHub 帳號，不再是學號）
a_all_github = [
    '41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103',
    '41223102', '41023128', '41023137', '41223137', '41223157', '41223156',
    'otakuyoyo', '41223141', '41223113', 'kim41223114', 'joeisme1208',
    '41223116', '41223144', '41223140', '41223143', '41223138', '41223134',
    '41223136', 'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 'Ren911308',
    '41223150', 'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133',
    'hong41223129', '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132',
    'Yu-Fang-Hong', '41023111', 'yckaooooo', 'kolas911205', '41023105',
    '40932134', '41223104', 'yan41223101', '41223105', '41223153', '41223120',
    '41223152', 'G8People', 'WSE41223112', '41223146', '41223119'
]

b_all_github = [
    '41223251', '41223211', '41223245', '41223243', 'jjjay41223212',
    'leeshaowei0716', '41223234', '41223209', '41223205', '41223201',
    '41223202', '41223208-hw', '41223216', '41223217', '41223248', 'emma0312',
    '41223242', '41223203', '41223144', '41223235', 'RAY41223215',
    'hyy41223228', '41223227', '41223206', '41223226-0', 'Cloud41223237',
    'Yujenchuang', '41223225', 'ljg41223220', 'supowen', 'jacky93111',
    '41223246', 'Liu41223244', '41223236', '41223219', '41271237',
    '41223249', '41223229', '41223224', '41223222', '41223231', 'linryan23',
    '41023114', '41223230', 'timluo123', 'CYC41223247', '41223218', 'ych0227',
    '41023215', '41023216', '41023213', '41071203', '41071204', '41071202',
    'c-ching', 'YUN4', 'tseYU000', 'snowfall-killer', 'junpig10'
]


def fetch_member_data(url):
    """
    從指定 URL 讀取資料並解析，回傳一個字典：
    { 學號 : GitHub帳號 }
    """
    try:
        with urllib.request.urlopen(url) as response:
            content = response.read()
    except Exception as e:
        brython_div1 <= f"存取 {url} 時發生錯誤: {e}" + html.BR()
        return {}

    # 若 content 為 bytes 則需解碼
    if isinstance(content, bytes):
        content = content.decode('utf-8')

    lines = content.splitlines()
    records = {}
    # 假設第一行是標題，從第二行開始處理
    for line in lines[1:]:
        line = line.strip()
        if not line:
            continue
        parts = line.split("\t")
        student_num = parts[0].strip()
        github = parts[1].strip() if len(parts) > 1 else ""
        records[student_num] = github
    return records


def invert_mapping(data):
    """
    將 { 學號 : GitHub帳號 } 的 mapping 反轉為 { GitHub帳號 : 學號 }，
    方便根據 GitHub 帳號查詢對應的學號。
    """
    inv = {}
    for student_num, github in data.items():
        if github:
            inv[github] = student_num
    return inv


def list_missing_by_github(expected_github_list, member_data, group_name):
    """
    列出預期的 expected_github_list 中，
    但在來源資料中找不到對應學號的 GitHub 帳號。
    """
    inv = invert_mapping(member_data)
    brython_div1 <= f"=== {group_name} 缺少對應學號的 GitHub 帳號 ===" + html.BR()
    missing = False
    for gh in expected_github_list:
        if gh not in inv:
            brython_div1 <= f"{gh}" + html.BR()
            missing = True
    if not missing:
        brython_div1 <= f"所有 {group_name} 的 GitHub 帳號均有對應學號！" + html.BR()


def check_wrong_group_by_github(expected_github_list, my_member_data, other_member_data, group_name):
    """
    檢查來源資料中，對於屬於該組資料的文件 (如 2a.txt 或 2b.txt)：
      - 對於那些出現在該文件中，但不屬於預期 expected_github_list 中的帳號，
      - 若該帳號在另一組的來源資料中也有記錄，則視為該帳號屬於另一組，
        不在此列為錯誤；除非另一組資料中也沒有該帳號，
      - 否則將其列出，標示為「未出現在該組學員陣列中但 {資料組別}.txt 中有資料」。
    """
    inv = invert_mapping(my_member_data)
    other_inv = invert_mapping(other_member_data)
    brython_div1 <= f"=== {group_name} 資料中未出現在該組學員陣列內的 GitHub 帳號 ===" + html.BR()
    wrong = False
    for gh in inv:
        if gh not in expected_github_list:
            # 除非在另一組資料中讀到這個帳號，否則列出為錯組
            if gh not in other_inv:
                brython_div1 <= f"{gh} (對應學號: {inv[gh]})" + html.BR()
                wrong = True
    if not wrong:
        brython_div1 <= f"{group_name} 的資料中沒有發現未在預期學員陣列中的 GitHub 帳號！" + html.BR()


def main():
    # 分別讀取 A 組 (2a.txt) 與 B 組 (2b.txt) 的資料
    url_a = "https://mde.tw/list/2a.txt"
    url_b = "https://mde.tw/list/2b.txt"
    a_member_data = fetch_member_data(url_a)
    b_member_data = fetch_member_data(url_b)


    # 檢查 B 組：以相同方式進行缺少對應學號及錯組檢查
    list_missing_by_github(b_all_github, b_member_data, "B 組")
    check_wrong_group_by_github(b_all_github, b_member_data, a_member_data, "B 組")


# 執行主流程
main()

# 取得目標 div
div = document["brython_div1"]

# 基本 IPv6 前綴
base_ip = "2001:288:6004:17:fff1:cd25:0:b"
port = "8000"

# 產生 66 個連結 (從 b001 到 b066)
for i in range(1, 67):  # 1 到 66
    # 格式化學員編號為三位數 (001-066)
    student_num = f"{i:03d}"
    # 完整的 IPv6 位址
    full_ip = f"{base_ip}{student_num}"
    # 完整的 URL
    url = f"http://[{full_ip}]:{port}"
    
    # 建立連結元素
    link = html.A(f"學員 {student_num}", href=url, target="_blank")
    # 每個連結後加入換行
    div <= link
    div <= html.BR()
</script>
<div id="brython_div1"></div>
<h2>task3</h2>
<p><strong>使用 Solvespace 建立平面四連桿系統零組件 (HW2)</strong></p>
<p><b>base</b></p>
<p><b><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/oViIjeKQftE" title="base繪製" width="560"></iframe></b></p>
<p><b>link1</b></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/FSW8RFyOAS8" title="link1繪製" width="560"></iframe></p>
<p>link2</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/kmY0BIbVum8" title="link2繪製" width="560"></iframe></p>
<p>link3</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/-D7slbqDy4I" title="link3繪製" width="560"></iframe></p>
<p>shaft1</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Nh5Df_1xqlc?si=88cTY2OduPH46WZP" title="YouTube video player" width="560"></iframe></p>
<p><span>shaft2</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/3VFwUIMZTCE?si=Ux9MaA7x_CLr4qz7" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p></p>
<p><b></b></p>
<h2>task4</h2>
<p><strong>使用 Onshape 建立平面四連桿系統零組件 (HW2)</strong></p>
<p>1.在 onshape 上繪製零件</p>
<p>2.將零件檔匯出成<span> </span><span>.OBJ</span></p>
<p>3.在 webots 上組裝零件</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/5dsCyQbrRD8?si=v4zdA5c3tX3Davh3" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/xUgogDhtPWU?si=xsPxEbmX1VqCnhyt" title="YouTube video player" width="560"></iframe> <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/e1DpHirbh-M?si=263Gw-mO7Ne4qD_u" title="YouTube video player" width="560"></iframe></p>
<p>調整後參數設定</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/hNYvwNmp3m0?si=sx1w0rE3nRxkg9b9" title="YouTube video player" width="560"></iframe></p>
<h3>w5</h3>
<p>Webots連接練習示範影片</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/nUBimlGcSfQ" title="HW4 webots連接練習加運作" width="560"></iframe></p>
<h2>task5</h2>
<h2>task6</h2>
<div class="line number1 index0 alt2"><code class="py comments"></code></div>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/i23RGZ47aVU" title="國立虎尾科技大學   機械設計工程系   cd2025 HW1   41071203" width="560"></iframe></p>
<p><span style="color: #000080;"><strong>檔案:</strong></span> <a href="/downloads/worlds.zip">四連桿機構原始檔</a></p>
<p><span style="color: #000080;"><strong>步驟:</strong></span></p>
<p><strong>一、基座 (Base)</strong><br/>1.在 robot.children 下新增一個 Solid 節點命名為 base。</p>
<p>2.base.children 中加入：</p>
<ul style="list-style-type: circle;">
<li>Shape 節點，其中包含：</li>
<li>geometry 使用 Box { size 1 0.1 0.1 }</li>
</ul>
<p><strong> base 是整體機器人的底座。</strong></p>
<p></p>
<p><strong>二、連桿一 (Link1)</strong></p>
<p>1.在 robot.children 下加入 HingeJoint，命名為 joint1。</p>
<p>2.joint1 下包含一個 Solid，其內結構如下：</p>
<ul>
<li>translation: -0.5 0 0</li>
<li>rotation: 0 0 1 1.5708</li>
</ul>
<p>3.children 包含：</p>
<ul>
<li>Pose (位置為 0.2 0 0.1) 內含：</li>
<li>Shape → Box { size 0.4 0.1 0.1 }</li>
<li>Appearance → Material { diffuseColor 1 0 0 }</li>
</ul>
<p>4.joint1 的其他設定：</p>
<ul>
<li>HingeJointParameters：
<ul>
<li>axis: 0 0 1</li>
<li>anchor: -0.5 0 0</li>
</ul>
</li>
</ul>
<p>5.加入一個 RotationalMotor 作為控制器裝置。</p>
<p></p>
<p><strong>三、連桿二 (Link2)</strong><br/>1.在 joint1 下加入第二個 HingeJoint，命名為 joint2。</p>
<p>2.joint2 的 Solid 結構：</p>
<ul>
<li>translation: 0.4 0 0.1</li>
<li>rotation: 0 0 -1 1.047195307179586</li>
</ul>
<p>3.children 包含：</p>
<ul>
<li>Pose (0.3 0 0.1) 包含：
<ul style="list-style-type: circle;">
<li>Shape → Box { size 0.6 0.1 0.1 }</li>
<li>Appearance → Material { diffuseColor 0 1 0 }</li>
</ul>
</li>
</ul>
<p>4.joint2 的參數：</p>
<ul>
<li>HingeJointParameters：
<ul>
<li>axis: 0 0 1</li>
<li>anchor: 0.4 0 0</li>
</ul>
</li>
</ul>
<p></p>
<p><strong>四、連桿三 (Link3)</strong><br/>1.在 joint2 下建立 HingeJoint，命名為 joint3。</p>
<p>2.joint3 內部 Solid：</p>
<ul>
<li>translation: 0.6 0 0</li>
<li>rotation: 0 0 -1 1.5</li>
</ul>
<p>3.children 中的 Pose (0.42 0 0) 含有：</p>
<ul>
<li>Shape → Box { size 0.9 0.1 0.1 }</li>
<li>Appearance → Material { diffuseColor 0 0 1 }</li>
</ul>
<p>4.HingeJointParameters：</p>
<ul>
<li>axis: 0 0 1</li>
<li>anchor: 0.6 0 0</li>
</ul>
<p></p>
<p><strong>五、Bounding Object 與物理屬性設定</strong><br/>1.為三個連桿加入對應的 boundingObject 與 physics：</p>
<p>2.Link1: Pose { translation 0.2 0 0.1 } → boundingObject → physics</p>
<p>3.Link2: Pose { translation 0.3 0 0.1 } → boundingObject → physics</p>
<p>4.Link3: Pose { translation 0.4 0 0 } → boundingObject → physics</p>
<p><strong></strong></p>
<p><strong>六、連結到最末端連桿 (Link3)</strong><br/>1.在 robot.children 下加入 HingeJoint 命名為 joint4</p>
<p>2.joint4 的子節點為 SolidReference { solidName "link3" }</p>
<p>3.設定 HingeJointParameters：</p>
<ul>
<li>axis: 0 0 1</li>
<li>anchor: 0.5 0 0</li>
</ul>
<p></p>
<p><strong>七、控制器</strong><br/>在 robot 中加入控制器，指向 .empty4</p>
<p><span style="color: #000080;"><strong>心得:</strong></span></p>
<p>一開始不太熟練Webots，因為之前都沒碰過這個程式，所以一直練習，還不斷問老師與同學，才成功把作業做出來，做出來那一刻很有成就感。</p><h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/0sYOsMbdgO0" title="國立虎尾科技大學   機械設計工程系   cd2025 HW2   41071203" width="560"></iframe></p>
<p><span style="color: #000080;"><strong>檔案: </strong></span><a href="/downloads/HW2.zip" title="HW2連桿">HW2連桿.zip</a></p>
<p><span style="color: #000080;"><strong>步驟:</strong></span></p>
<p><span style="color: #008000;"><strong>一.使用 SolveSpace 建構零件與組裝圖</strong></span></p>
<p style="padding-left: 30px;"><br/>1.在 SolveSpace 中設計各零件與機構結構。</p>
<p style="padding-left: 30px;">2. 匯出 STL 格式<br/>完成後將所有零件輸出為 .stl 格式檔案。</p>
<p style="padding-left: 30px;">3. 使用程式碼轉換 STL 為 OBJ 格式<br/>透過程式腳本（如使用 assimp, meshio, 或 Python 的 trimesh）將 .stl 轉為 .obj，便於後續操作與 Blender 匯入。</p>
<p style="padding-left: 30px;">4. 匯入 Blender 確認零件命名<br/>將 .obj 檔匯入 Blender。</p>
<p style="padding-left: 30px;"><strong>確認所有零件名稱無誤，以利對應到 Webots。</strong></p>
<p><span style="color: #008000;"><strong>二. Webots 機器人模型建構</strong></span></p>
<p><br/><strong>1.新增 robot 元件，並加入以下結構：</strong></p>
<p style="padding-left: 30px;"><span style="background-color: #99ccff;">a. Base 結構</span></p>
<ul>
<li>在 robot.children 中建立兩個 Solid 節點：</li>
</ul>
<p style="padding-left: 30px;"><span style="background-color: #99ccff;">b. base1</span></p>
<ul>
<li>children 包含：
<ul>
<li>Shape：</li>
<li>geometry：Mesh</li>
<li>appearance → Material { diffuseColor 0.8 0.8 1 }</li>
</ul>
</li>
</ul>
<p style="padding-left: 30px;"><span style="background-color: #99ccff;">c. base2</span><br/>結構同上，顏色相同，完成第二底座結構。</p>
<p style="padding-left: 30px;"><span style="background-color: #99ccff;">d. Link1</span></p>
<ul>
<li>新增 HingeJoint → 名為 joint1</li>
<li>子節點 Solid，內含：
<ul>
<li>Shape → 使用 Mesh</li>
<li>Appearance → Material { diffuseColor 1 0 0 }</li>
</ul>
</li>
<li>加入：
<ul>
<li>HingeJointParameters { axis 0 0 1 }</li>
<li>RotationalMotor → 控制裝置完成</li>
</ul>
</li>
</ul>
<p style="padding-left: 30px;"><span style="background-color: #99ccff;">e. Link2</span></p>
<ul>
<li>joint1 下建立 HingeJoint → 名為 joint2</li>
<li>Solid 內容：
<ul>
<li>Shape → Mesh</li>
<li>Appearance → Material { diffuseColor 0 1 0 }</li>
<li>HingeJointParameters：</li>
<li>axis 0 0 1</li>
<li>anchor -0.162 0.3656 0</li>
</ul>
</li>
</ul>
<p style="padding-left: 30px;"><span style="background-color: #99ccff;">f. Link3</span></p>
<ul>
<li>接續於 joint2 下加入 HingeJoint → joint3</li>
<li>內部 Solid：
<ul>
<li>Shape → Mesh</li>
<li>Appearance → Material { diffuseColor 0 0 1 }</li>
<li>HingeJointParameters：</li>
<li>axis 0 0 1</li>
<li>anchor 0.3702 0.6429 0</li>
</ul>
</li>
</ul>
<p><strong>2.碰撞與物理屬性設定</strong></p>
<ul>
<li>為每個 Link 設定 boundingObject 與 physics：
<ul>
<li>link1 → boundingObject { mesh } + physics</li>
<li>link2 → boundingObject { mesh } + physics</li>
<li>link3 → boundingObject { mesh } + physics</li>
</ul>
</li>
</ul>
<p><strong>3.Joint4 與連結</strong></p>
<ul>
<li>在 robot.children 中加入 HingeJoint → joint4</li>
<li>SolidReference { solidName "link3" }</li>
<li>HingeJointParameters：
<ul>
<li>axis 0 0 1</li>
<li>anchor 1 0 0</li>
</ul>
</li>
</ul>
<p><strong>4.控制器設定</strong></p>
<ul>
<li>設定 controller 為 .empty4</li>
</ul>
<p><strong><span style="color: #0000ff;">心得:</span></strong>跟作業一要做的東西差不多，也因為練習多了所以做的比較順了，但還是有那麼一點不熟練，還需要多加練習。</p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41071203</p>
<p><a href="/downloads/hw3.zip" title="HW3檔案">HW3檔案</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/MHmM-wHJuF8" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41071203" width="560"></iframe></p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p><strong>第1周</strong><br/>領取倉儲網頁與建立個人網站<br/><strong>第2周</strong><br/>建立list頁面與新增程式碼<br/><strong>第3周</strong><br/>修正錯誤與上傳新程式碼<br/><strong>第4周</strong><br/>製作可攜程式操作影片上傳<br/><strong>第5周</strong><br/>IPV6操作影片上傳<br/><strong>第6周</strong><br/>新增W5頁面與Webots操作影片上傳<br/><strong>第7周</strong><br/>SSH操作影片上傳<br/><strong>第8周</strong><br/>HW1做動影片和原始檔上傳<br/><strong>第9周</strong><br/>Task4與hw2操作影片上傳<br/><strong>第10周</strong><br/>task3操作影片新增、更改Tasks頁面內容、Wink操作影面上傳、完成Midterm內容</p>
<p></p>
<p>各週網頁內容:</p>
<p><strong>第1周</strong><br/>領取倉儲網頁與建立個人網站<br/><strong>第2周</strong><br/>建立list頁面與新增程式碼<br/><strong>第3周</strong><br/>修正錯誤與上傳新程式碼<br/><strong>第4周</strong><br/>製作可攜程式操作影片上傳<br/><strong>第5周</strong><br/>IPV6操作影片上傳<br/><strong>第6周</strong><br/>新增W5頁面與Webots操作影片上傳<br/><strong>第7周</strong><br/>SSH操作影片上傳<br/><strong>第8周</strong><br/>HW1做動影片和原始檔上傳<br/><strong>第9周</strong><br/>Task4與hw2操作影片上傳<br/><strong>第10周</strong><br/>task3操作影片新增、更改Tasks頁面內容、Wink操作影面上傳、完成Midterm內容</p>
<p></p>
<p><strong>期中心得:</strong></p>
<p>課上學到很多東西，因為很多都是之前沒碰過的，所以回家還需要回去吸收並整理，在這過程中我學到很多東西，像是Webots操作和連桿建立，與一些程式操作模擬等，每周都有盡量跟上進度，並編輯網站與更新倉儲。</p>
<p></p>
<p>期中自評影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/PfDAywoB-Vc" title="國立虎尾科技大學   機械設計工程系   cd2025 期中自評   41071203" width="560"></iframe></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/m8At8rnjQjI?si=4bhWl2FSqwoXLDDi" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p><strong><span style="color: #0000ff;">檔案:</span> </strong><a href="/downloads/EX1.zip">EX1檔案</a></p>
<p></p>
<p><span style="color: #0000ff;"><strong>詳細步驟:</strong></span></p>
<p><strong>一、建立 Robot 與基座 (Base)</strong></p>
<ol data-end="313" data-start="153">
<li class="" data-end="196" data-start="153">
<p class="" data-end="196" data-start="156">在 <code data-end="165" data-start="158">Robot</code> 節點中建立一個 <code data-end="181" data-start="174">Solid</code>，作為基座 <code data-end="193" data-start="187">base</code>。</p>
</li>
<li class="" data-end="268" data-start="197">
<p class="" data-end="268" data-start="200">在 <code data-end="208" data-start="202">base</code> 的 <code data-end="221" data-start="211">children</code> 中加入一個 <code data-end="235" data-start="228">Shape</code>，幾何為 <code data-end="245" data-start="240">Box</code>，大小為 <code data-end="265" data-start="250">1 x 0.1 x 0.1</code>。</p>
</li>
<li class="" data-end="313" data-start="269">
<p class="" data-end="313" data-start="272">為 <code data-end="280" data-start="274">base</code> 加入 <code data-end="300" data-start="284">boundingObject</code> 與 <code data-end="312" data-start="303">physics</code>。</p>
</li>
</ol>
<p><strong>二、建立第一個旋轉關節 joint1 與 link1</strong></p>
<ol data-end="703" data-start="355" start="4">
<li class="" data-end="404" data-start="355">
<p class="" data-end="404" data-start="358">在 <code data-end="367" data-start="360">Robot</code> 底下加入第一個 <code data-end="388" data-start="376">HingeJoint</code>，命名為 <code data-end="401" data-start="393">joint1</code>。</p>
</li>
<li class="" data-end="460" data-start="405">
<p class="" data-end="460" data-start="408">在 <code data-end="418" data-start="410">joint1</code> 的 <code data-end="431" data-start="421">endPoint</code> 中加入一個 <code data-end="445" data-start="438">Solid</code>，命名為 <code data-end="457" data-start="450">link1</code>。</p>
</li>
<li class="" data-end="516" data-start="461">
<p class="" data-end="516" data-start="464">在 <code data-end="473" data-start="466">link1</code> 中加入一個 <code data-end="487" data-start="480">Shape</code>，Box 尺寸為 <code data-end="513" data-start="496">0.4 x 0.1 x 0.1</code>。</p>
</li>
<li class="" data-end="590" data-start="517">
<p class="" data-end="590" data-start="520">調整 <code data-end="530" data-start="523">link1</code> 的位置為 <code data-end="552" data-start="536">(-0.5, 0, 0.1)</code>，旋轉角度為 <code data-end="578" data-start="559">(0, 0, 1, 0.0524)</code>（學號尾碼為 03）</p>
</li>
<li class="" data-end="653" data-start="591">
<p class="" data-end="653" data-start="594">設定 <code data-end="605" data-start="597">joint1</code> 的 <code data-end="626" data-start="608">axis = (0, 0, 1)</code>，<code data-end="650" data-start="627">anchor = (-0.5, 0, 0)</code>。</p>
</li>
<li class="" data-end="703" data-start="654">
<p class="" data-end="703" data-start="657">在 <code data-end="667" data-start="659">joint1</code> 中加入 <code data-end="689" data-start="672">RotationalMotor</code>，名稱為 <code data-end="702" data-start="694">motor1</code>。</p>
</li>
</ol>
<p><strong>三、在 link1 末端建立 joint2 與 link2</strong></p>
<ol data-end="1105" data-start="748" start="10">
<li class="" data-end="807" data-start="748">在 <code data-end="761" data-start="754">link1</code> 的 <code data-end="774" data-start="764">children</code> 中加入 <code data-end="791" data-start="779">HingeJoint</code>，命名為 <code data-end="804" data-start="796">joint2</code>。</li>
<li class="" data-end="864" data-start="808">在 <code data-end="822" data-start="814">joint2</code> 的 <code data-end="835" data-start="825">endPoint</code> 中加入一個 <code data-end="849" data-start="842">Solid</code>，命名為 <code data-end="861" data-start="854">link2</code>。</li>
<li class="" data-end="921" data-start="865">在 <code data-end="878" data-start="871">link2</code> 中加入一個 <code data-end="892" data-start="885">Shape</code>，Box 尺寸為 <code data-end="918" data-start="901">0.6 x 0.1 x 0.1</code>。</li>
<li class="" data-end="983" data-start="922">在 <code data-end="935" data-start="928">link2</code> 裡再加一個 <code data-end="949" data-start="942">Shape</code>，Box 尺寸為 <code data-end="975" data-start="958">0.3 x 0.1 x 0.1</code>（附加結構）</li>
<li class="" data-end="1044" data-start="984">調整 <code data-end="998" data-start="991">link2</code> 的位置為 <code data-end="1019" data-start="1004">(0.4, 0, 0.1)</code>，旋轉為 <code data-end="1041" data-start="1024">(0, 0, 1, 1.67)</code>。</li>
<li class="" data-end="1105" data-start="1045">設定 <code data-end="1060" data-start="1052">joint2</code> 的 <code data-end="1081" data-start="1063">axis = (0, 0, 1)</code>，<code data-end="1104" data-start="1082">anchor = (0.4, 0, 0)</code>。</li>
</ol>
<p><strong>四、在 link2 末端建立 joint3 與 link3</strong></p>
<ol data-end="1446" data-start="1150" start="16">
<li class="" data-end="1209" data-start="1150">在 <code data-end="1163" data-start="1156">link2</code> 的 <code data-end="1176" data-start="1166">children</code> 中加入 <code data-end="1193" data-start="1181">HingeJoint</code>，命名為 <code data-end="1206" data-start="1198">joint3</code>。</li>
<li class="" data-end="1266" data-start="1210">在 <code data-end="1224" data-start="1216">joint3</code> 的 <code data-end="1237" data-start="1227">endPoint</code> 中加入一個 <code data-end="1251" data-start="1244">Solid</code>，命名為 <code data-end="1263" data-start="1256">link3</code>。</li>
<li class="" data-end="1323" data-start="1267">在 <code data-end="1280" data-start="1273">link3</code> 中加入一個 <code data-end="1294" data-start="1287">Shape</code>，Box 尺寸為 <code data-end="1320" data-start="1303">0.9 x 0.1 x 0.1</code>。</li>
<li class="" data-end="1385" data-start="1324">調整 <code data-end="1338" data-start="1331">link3</code> 的位置為 <code data-end="1360" data-start="1344">(0.6, 0, -0.1)</code>，旋轉為 <code data-end="1382" data-start="1365">(0, 0, -1, 2.4)</code>。</li>
<li class="" data-end="1446" data-start="1386">設定 <code data-end="1401" data-start="1393">joint3</code> 的 <code data-end="1422" data-start="1404">axis = (0, 0, 1)</code>，<code data-end="1445" data-start="1423">anchor = (0.6, 0, 0)</code>。</li>
</ol>
<p><strong>五、從 Robot 底下建立 joint4，連接 link3（SolidReference）</strong></p>
<ol data-end="1689" data-start="1508" start="21">
<li class="" data-end="1567" data-start="1508">
<p class="" data-end="1567" data-start="1512">在 <code data-end="1521" data-start="1514">Robot</code> 的 <code data-end="1534" data-start="1524">children</code> 中建立 <code data-end="1551" data-start="1539">HingeJoint</code>，命名為 <code data-end="1564" data-start="1556">joint4</code>。</p>
</li>
<li class="" data-end="1630" data-start="1568">
<p class="" data-end="1630" data-start="1572">在 <code data-end="1582" data-start="1574">joint4</code> 的 <code data-end="1595" data-start="1585">endPoint</code> 中加入 <code data-end="1616" data-start="1600">SolidReference</code>，參考 <code data-end="1627" data-start="1620">link3</code>。</p>
</li>
<li class="" data-end="1689" data-start="1631">
<p class="" data-end="1689" data-start="1635">設定 <code data-end="1646" data-start="1638">joint4</code> 的 <code data-end="1667" data-start="1649">axis = (0, 0, 1)</code>，<code data-end="1688" data-start="1668">anchor = (1, 0, 0)</code>。</p>
</li>
</ol>
<p><strong>六、加上碰撞與控制器</strong></p>
<ol data-end="1872" data-start="1715" start="24">
<li class="" data-end="1775" data-start="1715">
<p class="" data-end="1775" data-start="1719">為 link1、link2、link3 各自加入 <code data-end="1760" data-start="1744">boundingObject</code> 與 <code data-end="1772" data-start="1763">physics</code>。</p>
</li>
<li class="" data-end="1830" data-start="1776">
<p class="" data-end="1830" data-start="1780">使用 <code data-end="1799" data-start="1783">boundingObject</code> 的 <code data-end="1808" data-start="1802">Pose</code> 搭配 <code data-end="1817" data-start="1812">USE</code> 語法重用對應的形狀。</p>
</li>
<li class="" data-end="1872" data-start="1831">
<p class="" data-end="1872" data-start="1835">在 <code data-end="1844" data-start="1837">Robot</code> 中加入 <code data-end="1861" data-start="1849">controller</code>，並指定控制程式名稱。</p>
</li>
</ol>
<p><span style="color: #0000ff;"><strong>心得:</strong></span></p>
<p>exam1和作業1很像，所以做起來沒有太大的困難，但程式有時候做到一半會閃退，所以要注意隨時存檔。</p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/9vmKljh-6fc?si=cWV05HKhQ3aGF-Qf" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></p>
<p></p>
<p><span style="color: #0000ff;"><strong>操作影片</strong></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/_b5IuWsax4w?si=UuM7XdJUg0BaSKz_" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p><span style="color: #0000ff;"><strong>檔案連結: <a href="/downloads/Exam2.zip">Exam2.zip</a></strong></span></p>
<p></p>
<p><span style="color: #0000ff;"><strong>步驟:</strong></span></p>
<p class="" data-end="152" data-start="51">在 <strong data-end="67" data-start="53">Solvespace</strong> 中完成零件與機構設計後，將模型匯出為 STL 格式。接著，使用程式碼工具將 STL 檔轉換為 OBJ 格式，再匯入 <strong data-end="137" data-start="126">Blender</strong>，以檢查所有零件名稱是否正確。</p>
<p class="" data-end="360" data-start="154">確認模型無誤後，開始在 <strong data-end="176" data-start="166">Webots</strong> 中建立機器人結構。首先，新增一個 <code data-end="201" data-start="194">Robot</code> 節點，並設定所需的 <code data-end="224" data-start="212">controller</code>（名稱為 <code data-end="249" data-start="229">fourbar_controller</code>）。接下來，在 <code data-end="267" data-start="257">children</code> 中加入兩個旋轉關節（<code data-end="290" data-start="278">HingeJoint</code>），分別命名為 <code data-end="306" data-start="298">joint1</code> 與 <code data-end="317" data-start="309">joint4</code>，以及兩個底座物件 <code data-end="334" data-start="327">Solid</code>（分別命名為 <code data-end="348" data-start="341">base1</code> 與 <code data-end="358" data-start="351">base2</code>）。</p>
<hr class="" data-end="365" data-start="362"/>
<p>base1 結構設定</p>
<p class="" data-end="511" data-start="382">在 <code data-end="391" data-start="384">base1</code> 的 <code data-end="404" data-start="394">children</code> 中加入一個 <code data-end="418" data-start="411">Shape</code>，並指定 <code data-end="429" data-start="423">Mesh</code> 幾何體。</p>
<hr class="" data-end="516" data-start="513"/>
<p>base2 結構設定</p>
<p class="" data-end="605" data-start="533">與 base1 類似，base2 也加入 <code data-end="561" data-start="554">Shape</code> 和 <code data-end="570" data-start="564">Mesh。</code></p>
<hr class="" data-end="610" data-start="607"/>
<p>建立連桿與關節</p>
<ol data-end="1167" data-start="625">
<li class="" data-end="849" data-start="625"><strong data-end="638" data-start="628">joint1</strong>
<ul data-end="849" data-start="642">
<li class="" data-end="692" data-start="642">
<p class="" data-end="692" data-start="644">指定 <code data-end="654" data-start="647">Solid</code>，並在 <code data-end="668" data-start="658">children</code> 中加入 <code data-end="680" data-start="673">Shape</code> 與對應 <code data-end="691" data-start="685">Mesh</code>。</p>
</li>
<li class="" data-end="795" data-start="747">
<p class="" data-end="795" data-start="749"><code data-end="771" data-start="749">HingeJointParameters</code> 中指定 <code data-end="782" data-start="776">axis</code> 為 <code data-end="794" data-start="785">(0 0 1)</code>。</p>
</li>
<li class="" data-end="849" data-start="799">
<p class="" data-end="849" data-start="801">加入 <code data-end="812" data-start="804">device</code> 元件 <code data-end="833" data-start="816">RotationalMotor</code>，完成連桿 link1 的配置。</p>
</li>
</ul>
</li>
<li class="" data-end="997" data-start="851">
<p class="" data-end="864" data-start="854"><strong data-end="864" data-start="854">joint2</strong></p>
<ul data-end="997" data-start="868">
<li class="" data-end="903" data-start="868">
<p class="" data-end="903" data-start="870">同樣建立對應的 <code data-end="885" data-start="878">Solid</code> 與 <code data-end="895" data-start="888">Shape</code>、<code data-end="902" data-start="896">Mesh</code>。</p>
</li>
<li class="" data-end="997" data-start="931">
<p class="" data-end="997" data-start="933"><code data-end="939" data-start="933">axis</code> 設為 <code data-end="952" data-start="943">(0 0 1)</code>，並設定 <code data-end="965" data-start="957">anchor</code> 為 <code data-end="987" data-start="968">(1.03 , 0.0539 , 0)</code>，完成 link2。</p>
</li>
</ul>
</li>
<li class="" data-end="1167" data-start="999">
<p class="" data-end="1012" data-start="1002"><strong data-end="1012" data-start="1002">joint3</strong></p>
<ul data-end="1167" data-start="1016">
<li class="" data-end="1049" data-start="1016">
<p class="" data-end="1049" data-start="1018">建立 <code data-end="1028" data-start="1021">Solid</code>，加入 <code data-end="1039" data-start="1032">Shape</code> 和 <code data-end="1048" data-start="1042">Mesh</code>。</p>
</li>
<li class="" data-end="1167" data-start="1077">
<p class="" data-end="1167" data-start="1079"><code data-end="1101" data-start="1079">HingeJointParameters</code> 指定 <code data-end="1111" data-start="1105">axis</code> 為 <code data-end="1123" data-start="1114">(0 0 1)</code>，並設定 <code data-end="1136" data-start="1128">anchor</code> 為 <code data-end="1157" data-start="1139">(0.864 , 1.54 , 0)</code>，完成 link3。</p>
</li>
</ul>
</li>
</ol>
<hr class="" data-end="1172" data-start="1169"/>
<p>物理與邊界設定</p>
<p class="" data-end="1213" data-start="1186">每個連桿（link1、link2、link3）都加入：</p>
<ul data-end="1285" data-start="1214">
<li class="" data-end="1253" data-start="1214">
<p class="" data-end="1253" data-start="1216"><code data-end="1232" data-start="1216">boundingObject</code>，使用對應的 <code data-end="1245" data-start="1239">mesh</code> 作為碰撞邊界。</p>
</li>
<li class="" data-end="1285" data-start="1254">
<p class="" data-end="1285" data-start="1256">對應的 <code data-end="1269" data-start="1260">physics</code> 模組，加入質量與動力模擬設定。</p>
</li>
</ul>
<hr class="" data-end="1290" data-start="1287"/>
<p>joint4 設定</p>
<ul data-end="1436" data-start="1306">
<li class="" data-end="1364" data-start="1306">
<p class="" data-end="1364" data-start="1308">建立 <code data-end="1323" data-start="1311">HingeJoint</code>（joint4），並使用 <code data-end="1352" data-start="1336">SolidReference</code> 指向 <code data-end="1363" data-start="1356">link3</code>。</p>
</li>
<li class="" data-end="1436" data-start="1365">
<p class="" data-end="1436" data-start="1367">設定 <code data-end="1392" data-start="1370">HingeJointParameters</code> 的 <code data-end="1401" data-start="1395">axis</code> 為 <code data-end="1413" data-start="1404">(0 0 1)</code>，<code data-end="1422" data-start="1414">anchor</code> 設為 <code data-end="1435" data-start="1426">(2 0 0)</code>。</p>
</li>
</ul>
<hr class="" data-end="1441" data-start="1438"/>
<p>控制器設定</p>
<ul data-end="1502" data-start="1453">
<ul data-end="1502" data-start="1453">
<ul data-end="1502" data-start="1453">
<li class="" data-end="1502" data-start="1453">
<p class="" data-end="1502" data-start="1455">指定使用的控制器為 <code data-end="1485" data-start="1465">fourbar_controller</code>，負責整體四連桿機構的控制與運作。</p>
</li>
</ul>
</ul>
</ul>
<p><strong><span style="color: #0000ff;"></span></strong></p>
<p><strong><span style="color: #0000ff;">心得:</span></strong></p>
<p><strong><span style="color: #0000ff;"></span></strong>考試2不像考試1一樣需要在webots裡繪製零件，而是要在Solvespace繪製完零件在轉檔匯入webots內，因此操作上相對簡單很多，只需要調整一下參數即可，</p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<p></p>
<p><span style="color: #0000ff; background-color: #ffcc99;"><strong>Exam3-1</strong></span></p>
<p><strong><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/DkAv1fRHwxs?si=G1q3qu-xlD_uNdxV" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></strong></p>
<p><span style="color: #0000ff;"><strong>操作步驟:</strong></span></p>
<ol>
<li>在控制台設定老師分發的<span>IPv6</span>網址</li>
<li><span>關閉IPv4</span>網址</li>
<li>以<span> webotsw --stream </span>啟動個人所完成的<span> HW1 </span>模擬系統</li>
<li>查看各自<span>webots</span>的端口</li>
<li>在網頁上輸入<span>http:[</span>自己的<span>IPv6</span>網址<span>]:</span>查看當下自己<span>webots</span>的端口<span>/index.html</span></li>
<li>在<span>Connect to</span>內輸入<span>[</span>自己的<span>IPv6</span>網址<span>]: <span>查看當下自己</span></span><span>webots</span>的端口</li>
<li>按下<span>Connect</span>即可看到自己<span>webots</span>的畫面</li>
<li>按下<span>Disconnec</span></li>
<li>到<span>Connect to</span>內輸入<span>[</span>組員的<span>IPv6</span>網址<span>]: </span>組員<span>webots</span>的端口(組員同時也需連線至各自的IPv6)，並依序查看各組員的檔案</li>
</ol>
<p></p>
<p><strong><span style="color: #0000ff;">心得:</span></strong></p>
<p><span style="color: #000000;">剛開始不太理解要怎麼跟組員做協同，也不知道該如何連到自己的網站，摸索了很久才終於連上自己的網站，之後就協助組員連上各自的IPv6，第一次連上的感覺很不可思議，也體驗到協同作業的特別之處。</span></p>
<p><strong></strong></p>
<p><span style="color: #0000ff; background-color: #ffcc99;"><strong>Exam3-2</strong></span></p>
<p><strong><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/nufCifoTWTU?si=M4hwbr8kT2ZLWqWb" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></strong></p>
<p><span style="color: #0000ff;"><strong>操作步驟:</strong></span></p>
<ol>
<li>在控制台設定老師分發的<span>IPv6</span>網址</li>
<li><span>關閉IPv4</span>網址</li>
<li>下載老師的檔案</li>
<li>以<span> webotsw --stream </span>開啟</li>
<li>查看各自<span>webots</span>的端口</li>
<li>在程式碼處修改成各自的學號</li>
<li>在網頁上輸入<span>http:[</span>自己的<span>IPv6</span>網址<span>]:</span>查看當下自己<span>webots</span>的端口<span>/index.html</span></li>
<li>在<span>Connect to</span>內輸入<span>[</span>自己的<span>IPv6</span>網址<span>]:<span> </span><span>查看當下自己</span></span><span>webots</span>的端口</li>
<li>按下<span>Connect</span>即可看到自己<span>webots</span>的畫面</li>
<li>按下<span>Disconnec</span></li>
<li>到<span>Connect to</span>內輸入<span>[</span>組員的<span>IPv6</span>網址<span>]: </span>組員<span>webots</span>的端口(組員同時也需連線至各自的IPv6)，並依序查看各組員的檔案</li>
</ol>
<p><strong><span style="color: #0000ff;"></span></strong></p>
<p><strong><span style="color: #0000ff;">心得:</span></strong></p>
<p><span style="color: #000000;">跟上一個內容差不多，只是要將程式碼的數字改成自己的學號末3碼，如果會操作上一個考試內容的話，這個題目也能成順利完成。</span></p>
<p></p>
<p><strong></strong></p>
<p><span style="color: #0000ff; background-color: #ffcc99;"><strong>Exam3-3</strong></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/m7HNrprcxq8?si=ky4N4dpSgAe7nyAG" title="YouTube video player" width="560"></iframe></p>
<p><span style="color: #0000ff;"><strong>操作步驟:</strong></span></p>
<ol>
<li>在控制台設定老師分發的<span>IPv6</span>網址</li>
<li><span>關閉IPv4</span>網址</li>
<li>輸入<span>pip</span>確認安裝正確的<span>python版本</span></li>
<li><span>輸入指令"<span style="background-color: #ccffff;">set WEBOTS_HOME=y:\Webots_2025a</span>"</span></li>
<li><span>輸入指令"<span style="background-color: #ccffff;">webots –stream</span>"</span></li>
<li>執行指令"<span><span style="background-color: #ccffff;">pip install websocket-client websocket-server keyboard</span>"</span></li>
<li>執行"<span style="background-color: #ccffff;">python youbot_cart_client.py"</span></li>
<li>查看各自<span>webots</span>的端口</li>
<li>在程式碼處修改成各自的學號</li>
<li>在網頁上輸入<span>http:[</span>自己的<span>IPv6</span>網址<span>]:</span>查看當下自己<span>webots</span>的端口<span>/index.html</span></li>
<li>在<span>Connect to</span>內輸入<span>[</span>組長的<span>IPv6</span>網址<span>]:<span> </span></span>組長<span>webots</span>的端口</li>
<li>按下<span>Connect</span>即可看到組長<span>webots</span>的畫面</li>
<li>按下上下左右建即可操控</li>
</ol>
<p><strong><span style="color: #0000ff;"></span></strong></p>
<p><strong><span style="color: #0000ff;">心得:</span></strong></p>
<p>這個題目相較於其他2題難度提高了不少，我們也是摸索很久，也求助於有相關經驗的學長才成功將這題做出來，不過這題的自由度相較於其他兩題來的高，如果成功用出來的話，成就感與可玩性也增加了不少。</p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<p><strong></strong></p>
<p><strong>檔案: <a href="/downloads/final.zip">final.zip</a></strong></p>
<p></p>
<p><b>影片:</b></p>
<p><b><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/-Mj8p8V0Ou8?si=p-69OLekNekxVYGa" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></b></p>
<p><b><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/Kjox3aG2f2U?si=4phRIuonAh24Zm3C" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></b></p>
<p><strong>心得:</strong></p>
<p>這次的final在組裝上面沒有太大的問題，問題最大的還是卡在程式方面，要讓他整個動起來並順利運行花了很長的時間，還是透過網路還有接觸過相關專業的同學幫忙除錯才能順利的做出來，看到可以順利運作時很開心，雖然過程很累但是是值得的。</p>
<p><strong>報告檔案:</strong></p>
<p><iframe frameborder="0" height="300" scrolling="no" src="https://1drv.ms/b/c/432bf841687207bd/IQSCEI9E4mVSS6KFtZ_B2rg8AfNzOLMRhOzR3YSTTb5pAE4" width="400"></iframe></p>
<p></p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>